type Query {
  getAppSettings: SettingsResponse @cacheControl(scope: PRIVATE)
  getOrganizationRequests(
    status: [String]
    search: String
    page: Int = 1
    pageSize: Int = 25
    sortOrder: String = "DESC"
    sortedBy: String = "created"
  ): OrganizationRequestResult @cacheControl(scope: PRIVATE)
  getOrganizationRequestById(id: ID!): OrganizationRequest
    @cacheControl(scope: PRIVATE)
  getOrganizations(
    status: [String]
    search: String
    page: Int = 1
    pageSize: Int = 25
    sortOrder: String = "DESC"
    sortedBy: String = "name"
  ): OrganizationResult @cacheControl(scope: PRIVATE)
  getOrganizationById(id: ID!): Organization @cacheControl(scope: PRIVATE)
  getCostCentersByOrganizationId(
    id: ID!
    search: String
    page: Int = 1
    pageSize: Int = 25
    sortOrder: String = "ASC"
    sortedBy: String = "name"
  ): CostCenterResult @cacheControl(scope: PRIVATE)
  getCostCenterById(id: ID!): CostCenter @cacheControl(scope: PRIVATE)
}

type Mutation {
  saveAppSettings: MutationResponse
  createOrganizationRequest(input: OrganizationInput!): MasterDataResponse
    @withUserDetails
  updateOrganizationRequest(
    id: ID!
    status: String!
    notes: String
  ): MutationResponse
  deleteOrganizationRequest(id: ID!): MutationResponse
  createOrganization(input: OrganizationInput!): MasterDataResponse
  createCostCenter(
    organizationId: ID!
    input: CostCenterInput!
  ): MasterDataResponse
  updateOrganization(
    id: ID!
    status: String!
    collections: [CollectionInput]
    priceTables: [PriceTableInput]
  ): MutationResponse
  updateCostCenter(id: ID!, input: CostCenterInput!): MutationResponse
  deleteOrganization(id: ID!): MutationResponse
  deleteCostCenter(id: ID!): MutationResponse
}

type SettingsResponse {
  adminSetup: Data
}

type OrganizationRequestResult {
  data: [OrganizationRequest]
  pagination: Pagination
}

type OrganizationResult {
  data: [Organization]
  pagination: Pagination
}

type CostCenterResult {
  data: [CostCenter]
  pagination: Pagination
}

type Pagination {
  page: Int
  pageSize: Int
  total: Int
}

type OrganizationRequest {
  id: ID
  name: String
  defaultCostCenter: DefaultCostCenter
  b2bCustomerAdmin: String
  status: String
  notes: String
  created: String
}

type DefaultCostCenter {
  name: String
  address: Address
}

type Organization {
  id: ID
  name: String
  collections: [Collection]
  priceTables: [PriceTable]
  costCenters: [ID]
  status: String
  created: String
}

type Collection {
  id: String
  name: String
}

type PriceTable {
  name: String
}

type CostCenter {
  id: ID
  name: String
  organization: ID
  addresses: [Address]
}

type Address {
  addressId: String
  addressType: String
  postalCode: String
  country: String
  receiverName: String
  city: String
  state: String
  street: String
  number: String
  complement: String
  neighborhood: String
  geoCoordinates: [Float]
}

type MasterDataResponse {
  id: String
  href: String
}

type MutationResponse {
  id: String
  status: String
  message: String
}

scalar Data

input OrganizationInput {
  name: String
  defaultCostCenter: DefaultCostCenterInput
}

input DefaultCostCenterInput {
  name: String
  address: AddressInput
}

input CostCenterInput {
  name: String
  addresses: [AddressInput]
}

input AddressInput {
  addressId: String
  addressType: String
  postalCode: String
  country: String
  receiverName: String
  city: String
  state: String
  street: String
  number: String
  complement: String
  neighborhood: String
  geoCoordinates: [Float]
}

input CollectionInput {
  id: String
  name: String
}

input PriceTableInput {
  name: String
}
